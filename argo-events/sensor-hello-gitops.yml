apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: hello-gitops
spec:
  template:
    serviceAccountName: workflow
  dependencies:
    - name: test-dep
      eventSourceName: github
      eventName: hello-gitops
      filters:
        data:
          # Name of the event that triggered the delivery: [pull_request, push, yadayadayada]
          # https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads
          - path: body.X-GitHub-Event
            type: string
            value:
              - pull_request
          - path: body.action
            type: string
            value:
              - opened
              - edited
              - reopened
              - synchronize
          - path: body.pull_request.state
            type: string
            value:
              - open
          - path: body.pull_request.base.ref
            type: string
            value:
              - main
  triggers:
    - template:
        name: github-workflow-trigger
        k8s:
          operation: create
          source:
            resource:
              apiVersion: argoproj.io/v1alpha1
              kind: WorkflowTemplate
              metadata:
                name: buildkit
              spec:
                arguments:
                  parameters:
                    - name: repo
                      value: https://github.com/diegoluisi/hello-gitops
                    - name: branch
                      value: main
                    - name: path
                      value: hello-gitops
                    - name: image
                      value: diegoluisi/hello-gitops:latest
                entrypoint: main
                # We use a volume claim template so that we can have a shared workspace.
                volumeClaimTemplates:
                  - metadata:
                      name: work
                    spec:
                      accessModes: [ "ReadWriteOnce" ]
                      resources:
                        requests:
                          storage: 64Mi
                templates:
                  - name: main
                    dag:
                      tasks:
                        - name: clone
                          template: clone
                          arguments:
                            parameters:
                              - name: repo
                                value: "{{workflow.parameters.repo}}"
                              - name: branch
                                value: "{{workflow.parameters.branch}}"
                        - name: image
                          template: image
                          arguments:
                            parameters:
                              - name: path
                                value: "{{workflow.parameters.path}}"
                              - name: image
                                value: "{{workflow.parameters.image}}"
                          depends: "clone"
                  - name: clone
                    inputs:
                      parameters:
                        - name: repo
                        - name: branch
                    container:
                      volumeMounts:
                        - mountPath: /work
                          name: work
                      image: alpine/git:v2.26.2
                      command: ["git"]
                      workingDir: /work
                      # Do a shallow clone, which is the fastest way to clone, by using the
                      # --depth, --branch, and --single-branch options
                      args:
                        - clone
                        - --depth
                        - "1"
                        - --branch
                        - "{{inputs.parameters.branch}}"
                        - --single-branch
                        - "{{inputs.parameters.repo}}"
                  - name: image
                    inputs:
                      parameters:
                        - name: path
                        - name: image
                    # Mount the configuration so we can push the image.
                    # This should create the /.docker/config.json file.
                    volumes:
                      - name: docker-config
                        secret:
                          secretName: docker-config
                    container:
                      image: moby/buildkit:master-rootless
                      volumeMounts:
                        - name: work
                          mountPath: /work
                        - name: docker-config
                          mountPath: /.docker
                      workingDir: /work/{{inputs.parameters.path}}/
                      env:
                        - name: BUILDKITD_FLAGS
                          value: --oci-worker-no-process-sandbox
                        - name: DOCKER_CONFIG
                          value: /.docker
                      command:
                        - buildctl-daemonless.sh
                      args:
                        - build
                        - --frontend
                        - dockerfile.v0
                        - --local
                        - context=.
                        - --local
                        - dockerfile=.
                        - --output
                        - type=image,name=docker.io/{{inputs.parameters.image}},push=true
              
#              apiVersion: argoproj.io/v1alpha1
#              kind: Workflow
#              metadata:
#                generateName: dag-diamond-
#              spec:
#                serviceAccountName: workflow
#                entrypoint: diamond
#                templates:
#                  - name: echo
#                    inputs:
#                      parameters:
#                        - name: message
#                    container:
#                      image: alpine:3.7
#                      command: [echo, "{{inputs.parameters.message}}"]
#                  - name: diamond
#                    dag:
#                      tasks:
#                        - name: A
#                          template: echo
#                          arguments:
#                            parameters: [{name: message, value: A}]
#                        - name: build
#                          dependencies: [A]
#                          templateRef:
#                            name: container-image
#                            template: build-kaniko-git
#                            clusterScope: true
#                          arguments:
#                            parameters:
#                            - name: repo_url
#                              value: ""
#                            - name: repo_ref
#                              value: ""
#                            - name: repo_commit_id
#                              value: ""
#                            - name: container_image
#                              value: CHANGE_ME_IMAGE_OWNER/
#                            - name: container_tag
#                              value: ""
#
